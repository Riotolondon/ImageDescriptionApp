@{
    ViewData["Title"] = "What's The Image?";
}
<link rel="stylesheet" href="~/css/style.css">

<header>
    What's The Image?
</header>

<div class="chat-container">
    <div class="chat-window">
        <!-- Uploaded Image as a Sent Message -->
        @if (ViewBag.ImageUrl != null)
        {
            <div class="chat-message sent">
                <img src="@ViewBag.ImageUrl" alt="Uploaded Image" class="chat-image">
            </div>
        }

        <!-- Detailed Response as a Received Message -->
        @if (ViewBag.Description != null || ViewBag.Tags != null)
        {
            <div class="chat-message received">
                <div class="message-content">
                    <p><strong>Description:</strong> @Html.Raw(Json.Serialize(ViewBag.Description))</p>
                    <p><strong>Tags:</strong></p>
                    <div class="tags">
                        @foreach (var tag in (List<string>)ViewBag.Tags)
                        {
                            <span class="tag">@tag</span>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Video and Capture Button -->
    <div id="cameraContainer" style="display:none;">
        <video id="video" width="320" height="240" autoplay></video>
        <button id="captureBtn" class="upload-btn">Capture Photo</button>
    </div>

    <!-- Upload Form -->
    <form asp-action="Index" asp-controller="Image" enctype="multipart/form-data" method="post" id="uploadForm">
        <div id="uploadArea" class="upload-area">
            Select Image
        </div>
        <input type="file" id="fileInput" name="file" accept="image/*" style="display:none;">
        <img id="imagePreview" src="#" alt="Image Preview" style="display:none; max-width: 100%; margin-top: 10px;">
        <svg id="cameraIcon" class="icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7h3l2-2h8l2 2h3v11H3V7z" />
            <circle cx="12" cy="13" r="4" />
        </svg>
        <button type="submit" id="uploadBtn" class="upload-btn" style="display:none;">Upload</button>
    </form>
</div>

<script>

    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');
    const imagePreview = document.getElementById('imagePreview');
    const uploadBtn = document.getElementById('uploadBtn');
    const cameraIcon = document.getElementById('cameraIcon');
    const cameraContainer = document.getElementById('cameraContainer');
    const video = document.getElementById('video');
    const captureBtn = document.getElementById('captureBtn');
    let stream;

    // Open file picker when upload area is clicked
    uploadArea.addEventListener('click', () => fileInput.click());

    // Display selected file name, show upload button, and display image preview
    fileInput.addEventListener('change', () => {
        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];
            const reader = new FileReader();

            reader.onload = function (e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = 'block'; // Ensure the image preview is displayed
            }

            reader.readAsDataURL(file);

            uploadBtn.style.display = 'block';
            uploadArea.textContent = file.name;
        }
    });

    // Disable the upload button after form submission
    uploadForm.addEventListener('submit', () => {
        uploadBtn.disabled = true;
        uploadBtn.textContent = 'Uploading...';
    });

    // Request camera access and show the video stream
    cameraIcon.addEventListener('click', async () => {
        try {
            stream = await navigator.mediaDevices.getUserMedia({ video: true });
            video.srcObject = stream;
            cameraContainer.style.display = 'block';
            uploadForm.style.display = 'none';  // Hide the upload form while taking a picture
        } catch (err) {
            console.error('Error accessing the camera: ', err);
        }
    });

    // Capture photo when capture button is clicked
    captureBtn.addEventListener('click', capturePhoto);

    // Capture photo when Enter or Spacebar is pressed
    document.addEventListener('keydown', (event) => {
        if (cameraContainer.style.display === 'block' && (event.key === 'Enter' || event.key === ' ')) {
            event.preventDefault(); // Prevent default action for the keys
            capturePhoto(); // Capture the photo
        }
    });

    function capturePhoto() {
        // Create a canvas element to capture the image from the video
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const context = canvas.getContext('2d');
        context.drawImage(video, 0, 0, canvas.width, canvas.height);

        // Convert the canvas image to a blob and set it as the value of the file input
        canvas.toBlob(blob => {
            const file = new File([blob], 'camera_photo.png', { type: 'image/png' });
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            fileInput.files = dataTransfer.files;

            const reader = new FileReader();
            reader.onload = function (e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = 'block';
            }

            reader.readAsDataURL(file);

            uploadBtn.style.display = 'block';
            uploadArea.textContent = 'camera_photo.png';

            // Stop the camera stream and hide the camera container
            stopCameraStream();
            uploadForm.style.display = 'flex';  // Show the upload form again
        });
    }

    function stopCameraStream() {
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
        }
        cameraContainer.style.display = 'none';
    }

</script>
